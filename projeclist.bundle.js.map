{"version":3,"file":"projeclist.bundle.js","mappings":"kIAQe,MAAMA,EAEnBC,cACEC,KAAKC,SAAW,GASlBC,WAAWC,GAET,OCFG,SAAmBC,EAAKC,GAC7B,MAAMC,EAAQF,EAAIG,WDCkBC,GAAMA,EAAEC,YAAcN,ICA1D,OAAOC,EAAIM,MAAMJ,EAAOA,EAAQ,GDAvB,CAAWN,KAAKC,UAA+C,GAGxEU,WAAWR,EAAaS,GAEtB,MAAMN,EAAQN,KAAKC,SAASM,WAAUC,GAAKA,EAAEC,YAAcN,IAC3DH,KAAKC,SAASK,GAASM,EAGzBC,cACE,OAAOb,KAAKC,SAGda,YAAYb,GACVD,KAAKC,SAAWA,EAGlBc,gBAAgBZ,GAEd,OADcH,KAAKC,SAASM,WAAUC,GAAKA,EAAEC,YAAcN,IAI7Da,WAAWC,GAOT,MAAMC,GAAW,IAAAC,QAAOnB,KAAKC,UAAUO,GAAKA,EAAEC,YAAcQ,EAAQR,YAE9DW,EAAmBpB,KAAKC,SAASkB,QAAOX,GAAKA,EAAEC,YAAcQ,EAAQR,YAE3E,OAA0B,IAApBS,EAASG,QAA4C,IAA5BD,EAAiBC,QAC9CC,MAAM,8CACC,cAGTtB,KAAKC,SAASsB,KAAKN,GACZA,GAGTO,cAAcrB,GAKZ,OC7DG,SAAqBC,EAAKC,GAC/B,MAAMC,EAAQF,EAAIG,WD4DmBC,GAAMA,EAAEC,YAAcN,IC3D3D,OAAOC,EAAIqB,OAAOnB,EAAO,GD2DhBoB,CAAY1B,KAAKC,c","sources":["webpack://todo-list/./src/project-list.js","webpack://todo-list/./src/array-util.js"],"sourcesContent":["// project-list.js\n\nimport { filter } from \"lodash\";\nimport { removeFirst, findFirst } from \"./array-util\";\n\n/**\n * Constructs a class that adds, deletes, and retrieves Projects from an array of Projects.\n */\nexport default class ProjectList {\n\n  constructor() {\n    this.projects = [];\n  }\n\n  /**\n   * Returns the Project object that matches the given name from the array of projects in\n   * ProjectList.\n   * @param {String} projectName name of the Project to get\n   * @returns Returns the Project that matches the given name\n   */\n  getProject(projectName) {\n    //returns the project found in the array\n    return (findFirst(this.projects, (p) => p.getName() === projectName))[0];\n  }\n\n  setProject(projectName, newProject) {\n    //find where(index) the project is located in the projects array\n    const index = this.projects.findIndex(p => p.getName() === projectName);\n    this.projects[index] = newProject;\n  }\n\n  getProjects() {\n    return this.projects;\n  }\n\n  setProjects(projects) {\n    this.projects = projects;\n  }\n\n  getProjectIndex(projectName) {\n    const index = this.projects.findIndex(p => p.getName() === projectName);\n    return index;\n  }\n\n  addProject(project) {\n    // Check if given project is instance of Project\n    // if (!(project instanceof Project || project instanceof projectFactory)) {\n    //   return \"Invalid input, must be of type project\";\n    // }\n\n    // Check if given project is duplicate, using Lodash filter method\n    const filtered = filter(this.projects, p => p.getName() === project.getName());\n    //Standard library filter method\n    const filteredProjects = this.projects.filter(p => p.getName() === project.getName());\n\n    if (!(filtered.length === 0 && filteredProjects.length === 0)) {\n      alert(\"Duplicate project error, please try again.\");\n      return \"Duplicate\";\n    }\n\n    this.projects.push(project);\n    return project;\n  }\n\n  removeProject(projectName) { \n    // if (!(typeof(project) === Project || typeof(project) === projectFactory)) {\n    //   return \"Invalid input, must be of type project\";\n    // }\n\n    return removeFirst(this.projects, (p) => p.getName() === projectName); \n  }\n}","/**\n * Removes the first occurrence of the element from the given array that satisfies the callback function. \n * Returns an array containing deleted elements or an empty array if no elements are removed.\n * \n * @param {Array} arr array to be traversed\n * @param {callback} callbackFn function to execute on each value in array until function returns true or reaches end of array \n * @returns {Array} an array containing deleted elements, empty array if no elements are removed\n */\nexport function removeFirst(arr, callbackFn) {\n  const index = arr.findIndex(callbackFn);\n  return arr.splice(index, 1);\n}\n\n/**\n * Returns an array that contains the first occurrence which meets the callbackFn's criteria.\n * \n * @param {Array} arr the array to traverse\n * @param {Function} callbackFn the function used to find the first occurrence\n * @returns \n */\nexport function findFirst(arr, callbackFn) {\n  const index = arr.findIndex(callbackFn);\n  return arr.slice(index, index + 1); //or just return arr[index]\n}"],"names":["ProjectList","constructor","this","projects","getProject","projectName","arr","callbackFn","index","findIndex","p","getName","slice","setProject","newProject","getProjects","setProjects","getProjectIndex","addProject","project","filtered","filter","filteredProjects","length","alert","push","removeProject","splice","removeFirst"],"sourceRoot":""}