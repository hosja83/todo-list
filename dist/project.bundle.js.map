{"version":3,"file":"project.bundle.js","mappings":"yIAWe,SAASA,EAAQC,GAM9B,OAJAC,KAAKD,KAAOA,EAAKE,OACjBD,KAAKE,MAAQ,IAAIC,MACjBH,KAAKI,UAAY,EAEVC,OAAOC,OAAOD,OAAOE,KAAK,CAC/BC,QAAS,IAAcR,KAAKD,KAC5BU,SAAU,IAAcT,KAAKE,MAC7BQ,aAAc,IAAcV,KAAKI,UACjCO,QAAUC,IACR,IAAIC,EAOJ,OANAb,KAAKE,MAAMY,SAAQC,IACbA,EAAEP,YAAcI,IAClBC,EAAOE,MAIJF,GAETG,aAAeJ,GACNZ,KAAKE,MAAMe,WAAUF,GAAKA,EAAEP,YAAcI,IAEnDM,aAAed,IAAeJ,KAAKI,UAAYA,GAC/Ce,QAAUpB,IAAUC,KAAKD,KAAOA,EAAKE,QACrCmB,QAAS,CAACR,EAAUS,KAClB,MAAMC,EAAQpB,MAAMe,WAAUF,GAAKA,EAAEP,YAAcI,IACnDZ,KAAKE,MAAMoB,GAASD,GAEtBE,QAAUV,IAIRb,KAAKE,MAAMY,SAAQC,IACjB,GAAIF,EAAKL,YAAcO,EAAEP,UACvB,MAAO,eAEXR,KAAKE,MAAMsB,KAAKX,GAChBb,KAAKI,aACE,GAETqB,WAAab,IACX,IACIc,EADAC,GAAc,EAUlB,OARA3B,KAAKE,MAAMY,SAAQ,CAACC,EAAGO,KACrB,GAAIV,IAAaG,EAAEP,UAGjB,OAFAmB,GAAc,OACdD,GAAS,IAAAE,QAAO5B,KAAKE,MAAO,CAACoB,QAI7BK,GAAa3B,KAAKI,YACfuB,EAAcD,EAAS,mCAY7B,MAAMG,EAAkBC,IAC7B,IAAI5B,EAAQ,IAAIC,MACZC,EAAY,EAChB,OAAOC,OAAOC,OAAOD,OAAOE,KAAK,CAC/BC,QAAS,IAAcsB,EAAE7B,OACzBQ,SAAU,IAAcP,EACxBQ,aAAc,IAAcN,EAC5BO,QAAUC,IACR,IAAIC,EAOJ,OANAX,EAAMY,SAAQC,IACRA,EAAEP,YAAcI,IAClBC,EAAOE,MAIJF,GAETG,aAAeJ,GACNV,EAAMe,WAAUF,GAAKA,EAAEP,YAAcI,IAE9CM,aAAea,IAAkB3B,EAAY2B,GAC7CZ,QAAUa,IAAaF,EAAIE,EAAQ/B,QACnCmB,QAAS,CAACR,EAAUS,KAClB,MAAMC,EAAQpB,EAAMe,WAAUF,GAAKA,EAAEP,YAAcI,IACnDV,EAAMoB,GAASD,GAEjBE,QAAUF,IAIRnB,EAAMY,SAAQC,IACZ,GAAIA,EAAEP,YAAca,EAAQb,UAC1B,MAAO,eAEXN,EAAMsB,KAAKH,GACXjB,KACO,GAETqB,WAAab,IACX,IACIc,EADAC,GAAc,EAUlB,OARAzB,EAAMY,SAAQ,CAACC,EAAGO,KAChB,GAAIV,IAAaG,EAAEP,UAGjB,OAFAmB,GAAc,OACdD,GAAS,IAAAE,QAAO1B,EAAO,CAACoB,QAIxBK,GAAavB,IACVuB,EAAcD,EAAS,sC","sources":["webpack://todo-list/./src/project.js"],"sourcesContent":["// project.js\n\nimport { pullAt} from 'lodash';\n\n/**\n * Returns a Project object created with the given name and an empty list of Task objects. \n * Object consists of methods to get and set it's fields.\n * \n * @param {String} name name given for the project\n * @returns Project object with given name\n */\nexport default function Project(name) {\n\n  this.name = name.trim();\n  this.tasks = new Array();\n  this.taskCount = 0;\n\n  return Object.freeze(Object.seal({\n    getName: () => {return this.name},\n    getTasks: () => {return this.tasks},\n    getTaskCount: () => {return this.taskCount},\n    getTask: (taskName) => {\n      let task;\n      this.tasks.forEach(t => {\n        if (t.getName() === taskName) {\n          task = t;\n          return;\n        }\n      });\n      return task;\n    },\n    getTaskIndex: (taskName) => {\n      return this.tasks.findIndex(t => t.getName() === taskName ? true : false);\n    },\n    setTaskCount: (taskCount) => {this.taskCount = taskCount},\n    setName: (name) => {this.name = name.trim()},\n    setTask: (taskName, newTask) => {\n      const index = tasks.findIndex(t => t.getName() === taskName ? true : false);\n      this.tasks[index] = newTask;\n    },\n    addTask: (task) => {\n      // This check doesn't work\n      // if (! (newTask instanceof Task) )\n      //   return 'param not instance of Task';\n      this.tasks.forEach(t => {\n        if (task.getName() === t.getName())\n          return 'duplicate';\n      });\n      this.tasks.push(task);\n      this.taskCount++;\n      return true;\n    },\n    removeTask: (taskName) => {\n      let istaskFound = false;\n      let result; \n      this.tasks.forEach((t, index) => {\n        if (taskName === t.getName()) {\n          istaskFound = true;\n          result = pullAt(this.tasks, [index]); //returns array containing remove elements\n          return;                       //_indexOf(this.tasks, t) different method to go about it\n        }\n      });\n      if (istaskFound) this.taskCount--;\n      return istaskFound ? result : 'task to be removed not found';\n    },\n  }));\n}\n\n/**\n * Returns a Project object created with the given name and an empty list of Task objects. \n * Object consists of methods to get and set it's fields.\n * \n * @param {String} n name of the project\n * @returns project object with given name\n */\nexport const projectFactory = (n) => {\n  let tasks = new Array();\n  let taskCount = 0;\n  return Object.freeze(Object.seal({\n    getName: () => {return n.trim()},\n    getTasks: () => {return tasks},\n    getTaskCount: () => {return taskCount},\n    getTask: (taskName) => {\n      let task;\n      tasks.forEach(t => {\n        if (t.getName() === taskName) {\n          task = t;\n          return;\n        }\n      });\n      return task;\n    },\n    getTaskIndex: (taskName) => {\n      return tasks.findIndex(t => t.getName() === taskName ? true : false);\n    },\n    setTaskCount: (newTaskCount) => {taskCount = newTaskCount},\n    setName: (newName) => {n = newName.trim()},\n    setTask: (taskName, newTask) => {\n      const index = tasks.findIndex(t => t.getName() === taskName ? true : false);\n      tasks[index] = newTask;\n    },\n    addTask: (newTask) => {\n      // This check doesn't work\n      // if (! (newTask instanceof Task) )\n      //   return 'param not instance of Task';\n      tasks.forEach(t => {\n        if (t.getName() === newTask.getName())\n          return 'duplicate';\n      });\n      tasks.push(newTask);\n      taskCount++;\n      return true;\n    },\n    removeTask: (taskName) => {\n      let istaskFound = false;\n      let result;\n      tasks.forEach((t, index) => {\n        if (taskName === t.getName()) {\n          istaskFound = true;\n          result = pullAt(tasks, [index]); //returns array containing remove elements\n          return;\n        }\n      });\n      if (istaskFound) taskCount--;\n      return istaskFound ? result : 'task to be removed not found';\n    },\n  }));\n};"],"names":["Project","name","this","trim","tasks","Array","taskCount","Object","freeze","seal","getName","getTasks","getTaskCount","getTask","taskName","task","forEach","t","getTaskIndex","findIndex","setTaskCount","setName","setTask","newTask","index","addTask","push","removeTask","result","istaskFound","pullAt","projectFactory","n","newTaskCount","newName"],"sourceRoot":""}